
package ws.test;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "JAXWSServicesService", targetNamespace = "http://ws/test/", wsdlLocation = "file:/D:/M1/JAXWS_CLIENT/src/JAXWS.wsdl")
public class JAXWSServicesService
    extends Service
{

    private final static URL JAXWSSERVICESSERVICE_WSDL_LOCATION;
    private final static WebServiceException JAXWSSERVICESSERVICE_EXCEPTION;
    private final static QName JAXWSSERVICESSERVICE_QNAME = new QName("http://ws/test/", "JAXWSServicesService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("file:/D:/M1/JAXWS_CLIENT/src/JAXWS.wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        JAXWSSERVICESSERVICE_WSDL_LOCATION = url;
        JAXWSSERVICESSERVICE_EXCEPTION = e;
    }

    public JAXWSServicesService() {
        super(__getWsdlLocation(), JAXWSSERVICESSERVICE_QNAME);
    }

    public JAXWSServicesService(WebServiceFeature... features) {
        super(__getWsdlLocation(), JAXWSSERVICESSERVICE_QNAME, features);
    }

    public JAXWSServicesService(URL wsdlLocation) {
        super(wsdlLocation, JAXWSSERVICESSERVICE_QNAME);
    }

    public JAXWSServicesService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, JAXWSSERVICESSERVICE_QNAME, features);
    }

    public JAXWSServicesService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public JAXWSServicesService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns ClientWS
     */
    @WebEndpoint(name = "ClientWSPort")
    public ClientWS getClientWSPort() {
        return super.getPort(new QName("http://ws/test/", "ClientWSPort"), ClientWS.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ClientWS
     */
    @WebEndpoint(name = "ClientWSPort")
    public ClientWS getClientWSPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://ws/test/", "ClientWSPort"), ClientWS.class, features);
    }

    private static URL __getWsdlLocation() {
        if (JAXWSSERVICESSERVICE_EXCEPTION!= null) {
            throw JAXWSSERVICESSERVICE_EXCEPTION;
        }
        return JAXWSSERVICESSERVICE_WSDL_LOCATION;
    }

}
